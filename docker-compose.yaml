services:
  redis:
    image: redis:7.4.2-alpine
    expose:
      - ${REDIS_PORT_INTERNAL}
    volumes:
      - redis-data:/data
    networks:
      - app-network

  backend:
    depends_on:
      - mongodb
      - redis
    expose:
      - ${BACKEND_PORT_INTERNAL}
    build:
      context: ./src/backend
      dockerfile: Dockerfile
    volumes:
      - ./src/backend/:/code
      - /code/.venv
    env_file:
      - ./.env
    networks:
      - app-network
    command: sh -c "\
      uv run pybabel compile -d /code/app/i18n/translations && \ 
      uv run fastapi dev --port ${BACKEND_PORT_INTERNAL} --host 0.0.0.0 --reload --proxy-headers"

  celery_worker:
    depends_on:
      - backend
      - redis
    container_name: celery_worker
    build:
      context: ./src/backend
      dockerfile: Dockerfile
    command: uv run celery --app app.celery.worker worker --loglevel=info --uid=nobody  --gid=nogroup
    volumes:
      - ./src/backend/:/code
      - /code/.venv
    env_file:
      - ./.env
    networks:
      - app-network

  flower:
    container_name: flower
    expose:
      - ${FLOWER_PORT_INTERNAL}
    environment:
      - CELERY_BROKER_URL=redis://redis:${REDIS_PORT_INTERNAL}/0
      - CELERY_RESULT_BACKEND=redis://redis:${REDIS_PORT_INTERNAL}/0
    depends_on:
      - celery_worker
      - redis
    build:
      context: ./src/backend
      dockerfile: Dockerfile
    command: uv run celery --broker=redis://redis:${REDIS_PORT_INTERNAL}/0 flower --port=${FLOWER_PORT_INTERNAL} --url-prefix=/dev/flower
    networks:
      - app-network

  frontend:
    depends_on:
      - backend
    build:
      context: ./src/frontend
      dockerfile: Dockerfile
    expose:
      - ${FRONTEND_PORT_INTERNAL}
    volumes:
      - ./src/frontend:/app
      - /app/node_modules
    environment:
      - PORT=${FRONTEND_PORT_INTERNAL}
      - VERIFY_MAIL_PATH=${VERIFY_MAIL_PATH}
      - PASSWORD_RESET_PATH=${PASSWORD_RESET_PATH}
    networks:
      - app-network
    tty: true
    command: sh -c "npm run dev -- --host 0.0.0.0 --port ${FRONTEND_PORT_INTERNAL}"

  mongodb:
    image: mongodb/mongodb-community-server:7.0-ubi9
    ports:
      - ${MONGO_PORT}:${MONGO_PORT_INTERNAL}
    volumes:
      - db_data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE}
    networks:
      - app-network

  nginx:
    image: nginx:1.27.3-alpine-slim
    depends_on:
      - frontend
      - backend
    volumes:
      - ./src/nginx/conf/nginx.conf:/etc/nginx/nginx.conf.template
      - ./src/nginx/entrypoint.sh:/etc/nginx/entrypoint.sh
      - ./src/nginx/certs/:/etc/nginx/certs/
    environment:
      - BACKEND_PORT_INTERNAL=${BACKEND_PORT_INTERNAL}
      - FRONTEND_PORT_INTERNAL=${FRONTEND_PORT_INTERNAL}
      - DOMAIN=${DOMAIN}
      - MAILHOG_UI_PORT_INTERNAL=${MAILHOG_UI_PORT_INTERNAL}
      - FLOWER_PORT_INTERNAL=${FLOWER_PORT_INTERNAL}
    entrypoint: [ "/bin/sh", "/etc/nginx/entrypoint.sh" ]
    ports:
      - "${HTTP_PORT}:80"
      - "${HTTPS_PORT}:443"
    networks:
      - app-network

  mailhog:
    image: mailhog/mailhog:latest
    expose:
      - ${MAILHOG_UI_PORT_INTERNAL}
    ports:
      - ${MAILHOG_PORT}:${MAILHOG_PORT_INTERNAL}
    networks:
      - app-network

  backup:
    image: mongodb/mongodb-community-server:7.0-ubi9
    volumes:
      - db_data:/data/db:ro
      - ./src/backup:/backup
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
    networks:
      - app-network
    tty: true
    entrypoint: ["tail", "-f", "/dev/null"]


volumes:
  db_data:
  redis-data:

networks:
  app-network:
    driver: bridge